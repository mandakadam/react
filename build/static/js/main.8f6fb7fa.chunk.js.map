{"version":3,"sources":["components/CalculatorFunctionWithHooks.js","components/CalculatorClassWithState.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorFunctionWithHooks","useState","data","setData","calcButtons","calcButtonsList","forEach","item","push","key","value","onClick","e","target","className","substr","length","String","eval","includes","toFixed","err","console","log","CalculatorClassWithState","props","state","this","setState","fixed","setResult","evalResult","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f6fb7fa.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n/* eslint no-eval: 0 */\r\n\r\nfunction CalculatorFunctionWithHooks(){\r\n    const [data, setData] = useState('');\r\n    const calcButtons = [];\r\n    const calcButtonsList = [0,1,2,3,4,5,6,7,8,9,'.'];\r\n\r\n    calcButtonsList.forEach(item=>{\r\n        calcButtons.push(\r\n        <button key={`button_${item}`} value={item} onClick={e=>{setData(data+e.target.value)}}>{item}</button>\r\n        )\r\n    })\r\n    return(\r\n    <div className=\"container\">\r\n        <div className=\"result\">{data}</div>\r\n        <div className=\"wrapper\">\r\n        <div  className=\"\">\r\n        <div  className=\"digits flex \">                       \r\n        {calcButtons}\r\n        </div>\r\n        <div  className=\"modifiers subgrid\">\r\n        <button onClick={e=> setData(data.substr(0,data.length -1 ))}>Clear</button>\r\n        <button onClick={e=> setData('')}>AC</button>\r\n        </div>  \r\n        </div>\r\n        <div  className=\"operations subgrid\">\r\n        <button value=\"+\" onClick={e=>{setData(data+e.target.value)}}>+</button>\r\n        <button value=\"-\" onClick={e=>{setData(data+e.target.value)}}>-</button>\r\n        <button value=\"*\" onClick={e=>{setData(data+e.target.value)}}>*</button>\r\n        <button value=\"/\" onClick={e=>{setData(data+e.target.value)}}>/</button>\r\n\r\n       \r\n        <button \r\n        value=\"=\"\r\n        onClick={e=>{\r\n            try{\r\n                setData(\r\n                    (String(eval(data)).length > 3 && String(eval(data)).includes('.'))\r\n                    ? \r\n                    String(eval(data).toFixed(4)) \r\n                    : \r\n                    String(eval(data))\r\n                )\r\n            }\r\n            catch(err){\r\n                console.log(err)\r\n            }\r\n        }}\r\n        >\r\n        =\r\n        </button>\r\n\r\n  \r\n    </div>\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorFunctionWithHooks;","import React, { Component } from 'react';\r\n/* eslint no-eval: 0 */\r\n\r\nclass CalculatorClassWithState extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: \"\"\r\n        }\r\n    }\r\n    setResult(e){\r\n        this.setState({\r\n            data: this.state.data + e.target.value\r\n        })\r\n    }\r\n    evalResult(){\r\n        try{\r\n            this.setState({\r\n                data: String(eval(this.state.data)).length > 3  \r\n                        && String(eval(this.state.data)).includes('.') \r\n                            ? String(eval(this.state.data).fixed(4)) \r\n                            : String(eval(this.state.data))\r\n            })\r\n          }\r\n          catch(err){\r\n            this.setState({ data:\"Error\"});\r\n          }\r\n        \r\n    }\r\n\r\n    render(){\r\n        const { data } = this.state;\r\n        const calcButtons = [];\r\n        const calcButtonsList = [0,1,2,3,4,5,6,7,8,9,'.'];\r\n    \r\n        calcButtonsList.forEach(item=>{\r\n            calcButtons.push(\r\n            <button key={`button_${item}`} value={item} onClick={e=>{this.setState({data: data +e.target.value})}}>{item}</button>\r\n            )\r\n        })\r\n        return(\r\n        <div className=\"container\">\r\n            \r\n                    <div className=\"result\">{data}</div>\r\n\r\n                    <div className=\"wrapper\">\r\n                            <div  className=\"\">\r\n                                <div  className=\"digits flex \">\r\n                                    {calcButtons}\r\n                                </div>\r\n                                <div  className=\"modifiers subgrid\">\r\n                                    <button onClick={e=> this.setState({data:data.substr(0,data.length - 1 )})}>Clear</button>\r\n                                    <button onClick={e=> this.setState({data:''})}>AC</button>\r\n                                </div>\r\n                            </div>\r\n                                \r\n                        \r\n                        <div  className=\"operations subgrid\">\r\n                            <button value=\"+\" onClick={e=>{this.setResult(e)}}>+</button>\r\n                            <button value=\"-\" onClick={e=>{this.setResult(e)}}>-</button>\r\n                            <button value=\"*\" onClick={e=>{this.setResult(e)}}>*</button>\r\n                            <button value=\"/\" onClick={e=>{this.setResult(e)}}>/</button>\r\n                            <button value=\"=\" onClick={()=>this.evalResult()}>=</button>\r\n                        </div>\r\n                        </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CalculatorClassWithState;","import React from 'react';\nimport './App.css';\nimport CalculatorFunctionWithHooks from './components/CalculatorFunctionWithHooks';\nimport CalculatorClassWithState from './components/CalculatorClassWithState';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CalculatorFunctionWithHooks />\n      <hr />\n      <CalculatorClassWithState />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}